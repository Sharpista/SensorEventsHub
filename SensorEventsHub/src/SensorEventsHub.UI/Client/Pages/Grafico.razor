@page "/MyPieChart"

@using System.Globalization
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util
@using SensorEventsHub.UI.Client.Models
@inject HttpClient Http

<h1>Pie Chart</h1>

<ChartJsPieChart @ref="_pieChartJs" Config="@_config" Width="600" Height="300" />

<div class="container">
    <div class="row">
        <div class="col">
            <button class="btn btn-primary">Add data</button>
        </div>
        <div class="col">
            <button class="btn btn-outline-danger">Remove data</button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button class="btn btn-primary">Add dataset</button>
        </div>
        <div class="col">
            <button class="btn btn-outline-danger">Remove dataset</button>
        </div>
    </div>
</div>

@code {
    private Evento [] eventos;
    private PieConfig _config;
    private ChartJsPieChart _pieChartJs;

    protected override async Task OnInitializedAsync()
    {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Sample chart from Blazor"
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                }
            }
        };

        _config.Data.Labels.AddRange(new [] { "Nordeste", "Sudeste", "Sul", "Norte" });

        var nordeste = new PieDataset
        {
            BackgroundColor = new [] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };

        var sudeste = new PieDataset
        {
            BackgroundColor = new [] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };

        var sul = new PieDataset
        {
            BackgroundColor = new [] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };

        var norte = new PieDataset
        {
            BackgroundColor = new [] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };

        nordeste.Data.Add(await Nordeste());
        sudeste.Data.Add(await Sudeste());
        sul.Data.Add(await Sul());
        norte.Data.Add(await Norte());
       
    }

    protected async Task<Double> Nordeste()
    {
        var count = 0;
        eventos = await Http.GetJsonAsync<Evento []>("http://localhost:55897/api/sensores/nordeste");
        count = eventos.Length;

        return count;
    }

    protected async Task<Double> Sul()
    {
        var count = 0;
        eventos = await Http.GetJsonAsync<Evento []>("http://localhost:55897/api/sensores/sul");
        count = eventos.Length;

        return count;
    }
    protected async Task<Double> Sudeste()
    {
        var count = 0;
        eventos = await Http.GetJsonAsync<Evento []>("http://localhost:55897/api/sensores/sudeste");
        count = eventos.Length;

        return count;
    }
    protected async Task<Double> Norte()
    {
        var count = 0;
        eventos = await Http.GetJsonAsync<Evento []>("http://localhost:55897/api/sensores/norte");
        count = eventos.Length;

        return count;
    }

}