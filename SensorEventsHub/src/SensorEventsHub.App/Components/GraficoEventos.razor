@using System.Globalization
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util
@using SensorEventsHub.App.Shared
@inject HttpClient Http

<div class="container-fluid">
    <ChartJsPieChart @ref="_pieChartJs" Config="@_config" Width="600" Height="300" />
</div>



@code {
    private Evento [] eventos;
    private PieConfig _config;
    private ChartJsPieChart _pieChartJs;

    protected override async Task OnInitializedAsync()
    {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Sample chart from Blazor"
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                }
            }
        };

        _config.Data.Labels.AddRange(new [] { "Nordeste", "Sudeste", "Sul", "Norte" });

        var pieSet = new PieDataset
        {
            BackgroundColor = new [] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };

        pieSet.Data.AddRange(new double [] { await Nordeste(), await Sudeste(), await Sul(), await Norte() });
        _config.Data.Datasets.Add(pieSet);

    }

    protected async Task<Double> Nordeste()
    {

        eventos = await Http.GetJsonAsync<Evento []>("http://localhost:50620/api/sensores/nordeste");
        var subLista = eventos.Where(x => !string.IsNullOrEmpty(x.Valor)).ToList();

        return subLista.Count();
    }

    protected async Task<Double> Sul()
    {
        eventos = await Http.GetJsonAsync<Evento []>("http://localhost:50620/api/sensores/sul");
        var subLista = eventos.Where(x => !string.IsNullOrEmpty(x.Valor)).ToList();

        return subLista.Count();
    }
    protected async Task<Double> Sudeste()
    {
        eventos = await Http.GetJsonAsync<Evento []>("http://localhost:50620/api/sensores/sudeste");
        var subLista = eventos.Where(x => !string.IsNullOrEmpty(x.Valor)).ToList();

        return subLista.Count();
    }

    protected async Task<Double> Norte()
    {

        eventos = await Http.GetJsonAsync<Evento []>("http://localhost:50620/api/sensores/norte");
        var subLista = eventos.Where(x => !string.IsNullOrEmpty(x.Valor)).ToList();

        return subLista.Count();
    }

}